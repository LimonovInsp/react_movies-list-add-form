{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/Helpers/validateForm.js","components/Shapes/InputsInformationShape.js","components/Helpers/urlValidator.js","components/MovieButton/MovieButton.js","components/Helpers/changeFieldHolder.js","components/Shapes/MovieInputShape.js","components/MovieInput/MovieInput.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","validateForm","PropTypes","shape","string","isRequired","inputs","fieldTitle","fieldDescription","fieldImgUrl","fieldImdbUrl","fieldImdbId","urlValidator","Array","from","Object","values","some","input","test","MovieButton","buttonOpacity","opacity","type","disabled","style","changeFieldHolder","onChangeInput","func","handleValidate","value","field","maxLength","touched","bool","error","toUpperCase","MovieInput","props","inputName","placeholder","onChange","event","target","onBlur","NewMovie","state","errors","setState","replace","prevState","length","handleSubmit","preventDefault","addNewMovie","this","movieInputs","onSubmit","Component","App","moviesFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ae43d10b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","export const validateForm = (inputs, urlValidator) => {\n  const inputsAmount = Array.from(Object.values(inputs));\n\n  if (inputsAmount.some(input => input === '')) {\n    return true;\n  }\n\n  if (!urlValidator.test(inputs.fieldImgUrl)\n   || !urlValidator.test(inputs.fieldImdbUrl)) {\n    return true;\n  }\n\n  return false;\n};\n","import PropTypes from 'prop-types';\n\nexport const InputsInformationShape = PropTypes.shape({\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n  imdbId: PropTypes.string.isRequired,\n  inputs: PropTypes.shape({\n    fieldTitle: PropTypes.string.isRequired,\n    fieldDescription: PropTypes.string.isRequired,\n    fieldImgUrl: PropTypes.string.isRequired,\n    fieldImdbUrl: PropTypes.string.isRequired,\n    fieldImdbId: PropTypes.string.isRequired,\n  }).isRequired,\n});\n","// eslint-disable-next-line max-len\nexport const urlValidator = (/^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/);\n","import React from 'react';\nimport { InputsInformationShape } from '../Shapes/InputsInformationShape';\nimport { validateForm } from '../Helpers/validateForm';\nimport { urlValidator } from '../Helpers/urlValidator';\n\nexport const MovieButton = ({ inputs }) => {\n  const buttonOpacity = validateForm(inputs, urlValidator)\n    ? { opacity: 0.5 }\n    : { opacity: 1 };\n\n  return (\n    <button\n      type=\"submit\"\n      className=\"App__button\"\n      disabled={validateForm(inputs, urlValidator)}\n      style={buttonOpacity}\n    >\n      Add a movie\n    </button>\n  );\n};\n\nMovieButton.propTypes = InputsInformationShape.isRequired;\n","export const changeFieldHolder = (field) => {\n  switch (field) {\n    case 'imgUrl':\n      return 'image url'.toUpperCase();\n    case 'imdbUrl':\n      return 'imdb url'.toUpperCase();\n    case 'imdbId':\n      return 'imdb id'.toUpperCase();\n    default:\n      return field.toUpperCase();\n  }\n};\n","import PropTypes from 'prop-types';\n\nexport const MovieInputShape = PropTypes.shape({\n  onChangeInput: PropTypes.func.isRequired,\n  handleValidate: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  field: PropTypes.string.isRequired,\n  maxLength: PropTypes.string.isRequired,\n  touched: PropTypes.bool.isRequired,\n  error: PropTypes.bool.isRequired,\n});\n","import React from 'react';\nimport { MovieInputShape } from '../Shapes/MovieInputShape';\nimport { changeFieldHolder } from '../Helpers/changeFieldHolder';\n\nexport const MovieInput = (props) => {\n  const {\n    onChangeInput,\n    handleValidate,\n    value,\n    field,\n    maxLength,\n    error,\n    touched,\n  } = props;\n\n  const inputName = error\n  && touched ? `App__input App__input-error` : `App__input`;\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        placeholder={changeFieldHolder(field)}\n        maxLength={maxLength}\n        value={value}\n        className={inputName}\n        onChange={event => onChangeInput(event.target.value, field)}\n        onBlur={event => handleValidate(event.target.value, field)}\n      />\n      {error && touched\n      && <div className=\"error__container\">{`Please enter the ${field}`}</div>}\n    </>\n  );\n};\n\nMovieInput.propTypes = MovieInputShape.isRequired;\n","import React, { Component } from 'react';\nimport './NewMovie.scss';\nimport PropTypes from 'prop-types';\nimport { MovieButton } from '../MovieButton/MovieButton';\nimport { MovieInput } from '../MovieInput/MovieInput';\nimport { urlValidator } from '../Helpers/urlValidator';\n\nexport class NewMovie extends Component {\n  state = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    errors: {\n      title: true,\n      description: true,\n      imgUrl: true,\n      imdbUrl: true,\n      imdbId: true,\n    },\n    touched: {\n      title: false,\n      description: false,\n      imgUrl: false,\n      imdbUrl: false,\n      imdbId: false,\n    },\n  };\n\n  onChangeInput = (event, field) => {\n    this.setState({\n      [field]: event.replace(/^\\s/, '').replace(/\\s/g, ' '),\n    });\n  }\n\n  handleValidate = (event, field) => {\n    if (field === 'imgUrl' || field === 'imdbUrl') {\n      // eslint-disable-next-line max-len\n\n      if (!urlValidator.test(event)) {\n        this.setState(prevState => ({\n          errors: {\n            ...prevState.errors,\n            [field]: true,\n          },\n          touched: {\n            ...prevState.touched,\n            [field]: true,\n          },\n        }));\n      } else {\n        this.setState(prevState => ({\n          errors: {\n            ...prevState.errors,\n            [field]: false,\n          },\n        }));\n      }\n    } else if (event.length === 0) {\n      this.setState(prevState => ({\n        errors: {\n          ...prevState.errors,\n          [field]: true,\n        },\n        touched: {\n          ...prevState.touched,\n          [field]: true,\n        },\n      }));\n    } else {\n      this.setState(prevState => ({\n        errors: {\n          ...prevState.errors,\n          [field]: false,\n        },\n      }));\n    }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    this.props.addNewMovie(this.state);\n\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n      errors: {\n        title: true,\n        description: true,\n        imgUrl: true,\n        imdbUrl: true,\n        imdbId: true,\n      },\n      touched: {\n        title: false,\n        description: false,\n        imgUrl: false,\n        imdbUrl: false,\n        imdbId: false,\n      },\n    });\n  }\n\n  render() {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      errors,\n      touched,\n    } = this.state;\n\n    const inputs = {\n      fieldTitle: title,\n      fieldDescription: description,\n      fieldImgUrl: imgUrl,\n      fieldImdbUrl: imdbUrl,\n      fieldImdbId: imdbId,\n    };\n\n    const movieInputs = [\n      {\n        onChangeInput: this.onChangeInput,\n        handleValidate: this.handleValidate,\n        value: title,\n        maxLength: '40',\n        field: 'title',\n        touched: touched.title,\n        error: errors.title,\n      },\n      {\n        onChangeInput: this.onChangeInput,\n        handleValidate: this.handleValidate,\n        value: description,\n        maxLength: '250',\n        field: 'description',\n        touched: touched.description,\n        error: errors.description,\n      },\n      {\n        onChangeInput: this.onChangeInput,\n        handleValidate: this.handleValidate,\n        value: imgUrl,\n        maxLength: '150',\n        field: 'imgUrl',\n        touched: touched.imgUrl,\n        error: errors.imgUrl,\n      },\n      {\n        onChangeInput: this.onChangeInput,\n        handleValidate: this.handleValidate,\n        value: imdbUrl,\n        maxLength: '70',\n        field: 'imdbUrl',\n        touched: touched.imdbUrl,\n        error: errors.imdbUrl,\n      },\n      {\n        onChangeInput: this.onChangeInput,\n        handleValidate: this.handleValidate,\n        value: imdbId,\n        maxLength: '30',\n        field: 'imdbId',\n        touched: touched.imdbId,\n        error: errors.imdbId,\n      },\n    ];\n\n    // eslint-disable-next-line max-len\n\n    return (\n      <form className=\"App__form\" onSubmit={this.handleSubmit}>\n        <h1>Add a movie</h1>\n        {movieInputs.map(input => (\n          <MovieInput\n            onChangeInput={input.onChangeInput}\n            handleValidate={input.handleValidate}\n            value={input.value}\n            maxLength={input.maxLength}\n            field={input.field}\n            touched={input.touched}\n            error={input.error}\n            key={input.field}\n          />\n        ))}\n        <MovieButton inputs={inputs} />\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = { addNewMovie: PropTypes.func.isRequired };\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addNewMovie = (movie) => {\n    this.setState(prevState => ({\n      movies: [\n        ...prevState.movies,\n        movie,\n      ],\n    }));\n  }\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addNewMovie={this.addNewMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}